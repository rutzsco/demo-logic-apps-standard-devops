# ------------------------------------------------------------------------------------------------------------------------
# Pipeline to scan existing Logic Application and pull down changes to the repository
# This pipeline needs variable group LogicAppRefresh
# See docs/Create-Refresh-Variable-Group.md for details on how to create this.
# ------------------------------------------------------------------------------------------------------------------------
name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)
pool:
  vmImage: windows-latest

# ----------------------------------------------------------------------------------------------------
trigger: none

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: InitializeRefreshWorkflowRepo
  displayName: Initialize Refresh Workflow Repo
  environment: 'DESIGN'

- job: RefreshWorkflowsRepo
  displayName: Refresh Workflow Repo
  variables:
    - group: LogicAppRefresh

  steps:
  - bash: |
      runDateTime=$(echo "$(date '+%Y-%m-%d_%H-%M-%S')")
      echo "##vso[task.setvariable variable=runDateTime]$runDateTime"
      echo "runDateTime=$runDateTime"

      branchName=$(echo "workflow_update_$runDateTime")
      echo "##vso[task.setvariable variable=branchName]$branchName"
      echo "branchName=$branchName"

      commitMessage=$(echo "Refresh Workflow via Pipeline on $runDateTime")
      echo "##vso[task.setvariable variable=commitMessage]$commitMessage"
      echo "commitMessage=$commitMessage"
    displayName: 'Create Variables'

  - bash: |
      echo "runDateTime=$(runDateTime)"
      echo "branchName=$(branchName)"
      echo "commitMessage=$(commitMessage)"
      echo "resourceGroupName=$(resourceGroupName)"
      echo "logicAppName=$(logicAppName)"
      echo "Build.RequestedFor=$(Build.RequestedFor)"
      echo "Build.RequestedForId=$(Build.RequestedForId)"
      echo "Build.RequestedForEmail=$(Build.RequestedForEmail)"
      echo "Build.QueuedBy=$(Build.QueuedBy)"
      echo "Build.QueuedById=$(Build.QueuedById)"
      echo "GITHUB_TOKEN=$(GITHUB_TOKEN)"
    displayName: 'Display Variables'
    continueOnError: true

  # Check out the repository
  # See: https://learn.microsoft.com/en-us/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml
  - checkout: self
    persistCredentials: true
    clean: true

  # Login is needed in order to scan the existing workflows
  - script: az login --service-principal -u $(principalId) -p $(clientSecret) --tenant $(tenantId)
    displayName: 'Login to Azure'

  # Pull down the latest repo
  - script: |
      git config --global user.email $(Build.RequestedForEmail) & git config --global user.name "$(Build.RequestedFor)"
      git checkout -b $(branchName)
      git push --set-upstream origin $(branchName)
      git pull origin $(branchName)
      echo "$(branchName)" > Workflows/Version/workflow_version.txt
    displayName: Fetch Repo
    workingDirectory: $(System.DefaultWorkingDirectory)

  # Scan the workflows in the portal for changes
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: '$(System.DefaultWorkingDirectory)\Infrastructure\scripts\download-portal-workflows.ps1'
      arguments: '-resourceGroupName $(resourceGroupName) -logicAppName $(logicAppName)'
    displayName: Download Workflows

  # Add our changes to a commit and check it in
  - script: |
      git add .
      git commit -m "$(commitMessage)"
      git push origin $(branchName)
    displayName: Create Branch
    workingDirectory: $(System.DefaultWorkingDirectory)

  # Create a GitHub pull request
  - script: |
      echo $(GITHUB_TOKEN) | gh auth login --with-token
      gh pr create --title "$(branchName)" --body "$(commitMessage)"
    displayName: Create PR
    workingDirectory: $(System.DefaultWorkingDirectory)
